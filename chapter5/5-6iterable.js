function rangeRealization() {
  let range = {
    from: 1,
    to: 5,
  };
  // 1. –≤—ã–∑–æ–≤ for..of —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
  range[Symbol.iterator] = function() {
    // ...–æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞:
    // 2. –î–∞–ª–µ–µ, for..of —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º,
    // –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —É –Ω–µ–≥–æ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    return {
      current: this.from,
      last: this.to,

      // 3. next() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ for..of
      next() {
        // 4. –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ {done:.., value :...}
        if (this.current <= this.last) {
          return { done: false, value: this.current++ };
        } else {
          return { done: true };
        }
      }
    };
  };

  for (let num of range) {
    console.log(num);
  };
}

// rangeRealization();

/**–ö–æ–≥–¥–∞ —Ü–∏–∫–ª for..of –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–¥–∏–Ω —Ä–∞–∑ (–∏–ª–∏ –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω). –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä ‚Äì –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º next.
 * 
–î–∞–ª—å—à–µ for..of —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º.

–ö–æ–≥–¥–∞ for..of —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ next() —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.

–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ next() –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∏–¥ {done: Boolean, value: any}, –≥–¥–µ done=true –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ value —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. */


function manualCallOfIterator() {
  let str = "Helios";
  let iterator = str[Symbol.iterator]();

  while (true) {
    let result = iterator.next();
    if (result.done) break;
    console.log(result.value);
  };
}

// manualCallOfIterator();


function iterableObjectsAndPseudoArrays() {
  let arrayLike = {
    0: "Hello",
    1: "World",
    length: 2,
  };

  for (let item of arrayLike) { // TypeError: arrayLike is not iterable
    console.log(item);
  }
};

// iterableObjectsAndPseudoArrays();


function iterableObjectsAndPseudoArrays2() {
  let arrayLike = {
    0: "World",
    1: "Hello",
    length: 2,
  }

  let trueArrae = Array.from(arrayLike);
  console.log(trueArrae.pop());
}

// iterableObjectsAndPseudoArrays2();


function showLastPropertyInArray() {
  let arr = [10, 1, 9, 2, 8, 3, 7, 4, 6, 5];
  console.log(arr[arr.length - 1]);
}

// showLastPropertyInArray();


function arrFromSyntax() {
  // Array.from(obj[, mapFn, thisArg])

  let range = {
    from: 1,
    to: 5,

    [Symbol.iterator]() {
      this.current = this.from;
      return this;
    },

    next() {
      if (this.current <= this.to) {
        return { done: false, value: this.current++ };
      } else {
        return { done: true };
      }
    }
  };

  let arr = Array.from(range, (num) => num * num);

  console.log(arr);

  let str = "ùí≥üòÇ";
  let chars = Array.from(str);
  console.log(chars[0]);
  console.log(chars[1]);
  console.log(chars.length);
}

// arrFromSyntax();


function sliceWithSurrogatePair() {
  function slice(str, start, end) {
    return Array.from(str).slice(start, end).join("");
  }

  let str = "ùí≥üòÇ©∑∂";
  console.log(slice(str, 1, 3));
  console.log(str.slice(1, 3));
  
}

// sliceWithSurrogatePair();


function iterable1() {
  const iterable = {
    items: [1, 2, 3],
    [Symbol.iterator]() {
      let index = 0;
      const items = this.items;
      return {
        next() {
          if (index < items.length) {
            return { done: false, value: items[index++] };
          } else {
            return { done: true };
          }
        }
      };
    }
  };

  for (let value of iterable) {
    console.log(value);
  };

  const obj = {
    [Symbol.iterator]() {
      let count = 0;
      return {
        next() {
          if (count < 3) {
            return { value: count++, done: false };
          } else {
            return { done: true };
          }
        }
      };
    }
  };

  for (let value of obj) {
    console.log(value);
  }
}


// iterable1();


function sub() {
  let countdown = {
    from: 3,
    to: 1,

    // [Symbol.iterator]() {
    //   return {
    //     next() {
    //       if (this.from >= this.to) {
    //         return { done: false, value: this.from-- } 
    //       } else {
    //         return { done: true }
    //       }
    //     }
    //   }
    // }

    [Symbol.iterator]() {
      return {
        current: this.from,
        last: this.to,

        next() {
          if (this.current >= this.last) {
            return { done: false, value: this.current-- }
          } else {
            return { done: true }
          }
        }
      }
    }
  };

  for (let n of countdown) {
    console.log(n);
  }
}

// sub();


function randomObjekt() {
  let apt = {
    numOfApt: 304,
    rooms: 3,
    bathrooms: 2,
    hasLight: true,

    [Symbol.iterator]() {
      const values = Object.entries(this);
      let i = 0;
      return {
        next() {
          if (i < values.length) return {value: values[i++], done: false};
          else return {done: true};
        }
      }
    }
  };

  for (let v of apt) {
    console.log(v); // [ 'numOfApt', 304 ], [ 'rooms', 3 ], [ 'bathrooms', 2 ], [ 'hasLight', true ]
  }

  let iter = [][Symbol.iterator]();
  console.log(iter.next()); // {value: undefined, done: true}
}

randomObjekt();